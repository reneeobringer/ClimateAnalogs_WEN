package_version()
packageVersion()
packageVersion("dplyr")
packageVersion("ggplot2")
packageVersion("ggrepel")
packageVersion("stringr")
packageVersion("data.table")
packageVersion("rlist")
packageVersion("tidyverse")
# Main Path
path <- '/Users/rqo5125/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/GitHub/public/ClimateAnalogs_WEN/'
# Directories
datadir1 <- paste(path, 'UtilityData/rawdata', sep = '')
datadir2 <- paste(path, '/ClimateData', sep = '')
########### LOAD DATA #############
setwd(datadir1)
filelist <- list.files(pattern = "*.csv", full.names = TRUE)
# load cities with both water and electricity data
cities <- list()
for (filename in filelist) {
raw_df <- fread(filename)
raw_df <- na.omit(raw_df)
cities <- list.append(cities, raw_df)
}
# Libraries
library(dplyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(data.table)
library(rlist)
library(tidyverse)
filelist <- list.files(pattern = "*.csv", full.names = TRUE)
# load cities with both water and electricity data
cities <- list()
for (filename in filelist) {
raw_df <- fread(filename)
raw_df <- na.omit(raw_df)
cities <- list.append(cities, raw_df)
}
# initialize variables
column_name <- "year"      # Column name to subset by
years_list <- c(2007:2018) # Condition to subset rows
beta_wateruse <- numeric(length(years_list))
intercept_wateruse <- numeric(length(years_list))
CI95lower_wateruse <- numeric(length(years_list))
CI95upper_wateruse <- numeric(length(years_list))
R2_wateruse <- numeric(length(years_list))
beta_elecuse <- numeric(length(years_list))
R2_elecuse <- numeric(length(years_list))
intercept_elecuse <- numeric(length(years_list))
CI95lower_elecuse <- numeric(length(years_list))
CI95upper_elecuse <- numeric(length(years_list))
output_df <- data.frame()
output_vars <- c("year", "beta_wateruse", "beta_elecuse",
"intercept_wateruse", "intercept_elecuse",
"r2_wateruse", "r2_elecuse",
"rmse_wateruse", "rmse_elecuse",
"nrmse_wateruse", "nrmse_elecuse",
"CI95lower_wateruse", "CI95upper_wateruse",
"CI95lower_elecuse", "CI95upper_elecuse")
# Loop through the cities
my_df_list <- list()
for (condition in years_list) {
# Create an empty list to store the subset data frames
ann_list <- list()
# Loop through each data frame in the list and subset rows
for (i in 1:length(cities)) {
df <- cities[[i]]
subset_df <- df[df[[column_name]] == condition, ]
ann_list[[i]] <- subset_df
}
# Resulting list of subset data frames
ann_list_avg <- list()
my_df <- data.frame()
for (i in 1:length(ann_list)) {
if (nrow(ann_list[[i]]) > 0) {
ann_avg <- ann_list[[i]]%>%
group_by(year) %>%
summarize(wateruse = mean(wateruse),
elecuse = mean(elecuse),
wateruse_population = mean(wateruse_population),
elecuse_population = mean(elecuse_population))
cityname <- strsplit(filelist[i], "./")[[1]][[2]]
cityname <- strsplit(cityname, ".csv")[[1]]
ann_avg[, "cityname"] = cityname
my_df[nrow(my_df) + 1,names(ann_avg)] = ann_avg
}
}
my_df_list <- list.append(my_df_list, my_df)
}
View(raw_df)
# Loop through the cities
my_df_list <- list()
for (condition in years_list) {
# Create an empty list to store the subset data frames
ann_list <- list()
# Loop through each data frame in the list and subset rows
for (i in 1:length(cities)) {
df <- cities[[i]]
subset_df <- df[df[[column_name]] == condition, ]
ann_list[[i]] <- subset_df
}
# Resulting list of subset data frames
ann_list_avg <- list()
my_df <- data.frame()
for (i in 1:length(ann_list)) {
if (nrow(ann_list[[i]]) > 0) {
ann_avg <- ann_list[[i]]%>%
group_by(year) %>%
summarize(wateruse = mean(wateruse),
elecuse = mean(elecuse),
wateruse_population = mean(wateruse_population),
elecuse_population = mean(elecuse_population))
cityname <- strsplit(filelist[i], "./")[[1]][[2]]
cityname <- strsplit(cityname, ".csv")[[1]]
ann_avg[, "cityname"] = cityname
my_df[nrow(my_df) + 1,names(ann_avg)] = ann_avg
}
}
my_df_list <- list.append(my_df_list, my_df)
}
View(df)
ann_list
ann_avg <- ann_list[[i]]%>%
group_by(year) %>%
summarize(wateruse = mean(wateruse),
elecuse = mean(elecuse),
wateruse_population = mean(wateruse_population),
elecuse_population = mean(elecuse_population))
ann_list[[i]]
# initialize variables
column_name <- "year"      # Column name to subset by
years_list <- c(2007:2018) # Condition to subset rows
beta_wateruse <- numeric(length(years_list))
intercept_wateruse <- numeric(length(years_list))
CI95lower_wateruse <- numeric(length(years_list))
CI95upper_wateruse <- numeric(length(years_list))
R2_wateruse <- numeric(length(years_list))
beta_elecuse <- numeric(length(years_list))
R2_elecuse <- numeric(length(years_list))
intercept_elecuse <- numeric(length(years_list))
CI95lower_elecuse <- numeric(length(years_list))
CI95upper_elecuse <- numeric(length(years_list))
output_df <- data.frame()
output_vars <- c("year", "beta_wateruse", "beta_elecuse",
"intercept_wateruse", "intercept_elecuse",
"r2_wateruse", "r2_elecuse",
"rmse_wateruse", "rmse_elecuse",
"nrmse_wateruse", "nrmse_elecuse",
"CI95lower_wateruse", "CI95upper_wateruse",
"CI95lower_elecuse", "CI95upper_elecuse")
# Loop through the cities
my_df_list <- list()
for (condition in years_list) {
# Create an empty list to store the subset data frames
ann_list <- list()
# Loop through each data frame in the list and subset rows
for (i in 1:length(cities)) {
df <- cities[[i]]
subset_df <- df[df[[column_name]] == condition, ]
ann_list[[i]] <- subset_df
}
# Resulting list of subset data frames
ann_list_avg <- list()
my_df <- data.frame()
for (i in 1:length(ann_list)) {
if (nrow(ann_list[[i]]) > 0) {
ann_avg <- ann_list[[i]]%>%
group_by(year) %>%
summarize(wateruse = mean(wateruse),
elecuse = mean(elecuse),
wateruse_population = mean(wateruse_population),
elecuse_population = mean(elecuse_population))
cityname <- strsplit(filelist[i], "./")[[1]][[2]]
cityname <- strsplit(cityname, ".csv")[[1]]
ann_avg[, "cityname"] = cityname
my_df[nrow(my_df) + 1,names(ann_avg)] = ann_avg
}
}
my_df_list <- list.append(my_df_list, my_df)
}
ann_list
ann_list[[i]]
# Create an empty list to store the subset data frames
ann_list <- list()
ann_list
# Loop through each data frame in the list and subset rows
for (i in 1:length(cities)) {
df <- cities[[i]]
subset_df <- df[df[[column_name]] == condition, ]
ann_list[[i]] <- subset_df
}
ann_list
ann_list[[i]]
# Resulting list of subset data frames
ann_list_avg <- list()
my_df <- data.frame()
for (i in 1:length(ann_list)) {
if (nrow(ann_list[[i]]) > 0) {
ann_avg <- ann_list[[i]] %>%
group_by(year) %>%
summarize(wateruse = mean(wateruse),
elecuse = mean(elecuse),
wateruse_population = mean(wateruse_population),
elecuse_population = mean(elecuse_population))
cityname <- strsplit(filelist[i], "./")[[1]][[2]]
cityname <- strsplit(cityname, ".csv")[[1]]
ann_avg[, "cityname"] = cityname
my_df[nrow(my_df) + 1,names(ann_avg)] = ann_avg
}
}
ann_list
i
ann_list[[i]]
# Create an empty list to store the subset data frames
ann_list <- list()
# Loop through each data frame in the list and subset rows
for (i in 1:length(cities)) {
df <- cities[[i]]
subset_df <- df[df[[column_name]] == condition, ]
ann_list[[i]] <- subset_df
}
ann_list[[i]]
ann_list[[i]] %>%
group_by(year) %>%
summarize(wateruse = mean(wateruse),
elecuse = mean(elecuse),
wateruse_population = mean(wateruse_population),
elecuse_population = mean(elecuse_population))
cityname <- strsplit(filelist[i], "./")[[1]][[2]]
cityname <- strsplit(cityname, ".csv")[[1]]
ann_avg[, "cityname"] = cityname
my_df[nrow(my_df) + 1,names(ann_avg)] = ann_avg
my_df
i <- 33
if (nrow(ann_list[[i]]) > 0) {
ann_avg <- ann_list[[i]] %>%
group_by(year) %>%
summarize(wateruse = mean(wateruse),
elecuse = mean(elecuse),
wateruse_population = mean(wateruse_population),
elecuse_population = mean(elecuse_population))
cityname <- strsplit(filelist[i], "./")[[1]][[2]]
cityname <- strsplit(cityname, ".csv")[[1]]
ann_avg[, "cityname"] = cityname
my_df[nrow(my_df) + 1,names(ann_avg)] = ann_avg
}
ann_list[[i]]
# Create an empty list to store the subset data frames
ann_list <- list()
# Loop through each data frame in the list and subset rows
for (i in 1:length(cities)) {
df <- cities[[i]]
subset_df <- df[df[[column_name]] == condition, ]
ann_list[[i]] <- subset_df
}
i <- 33
ann_list[[i]]
# Loop through the cities
my_df_list <- list()
for (condition in years_list) {
# Create an empty list to store the subset data frames
ann_list <- list()
# Loop through each data frame in the list and subset rows
for (i in 1:length(cities)) {
df <- cities[[i]]
subset_df <- df[df[[column_name]] == condition, ]
ann_list[[i]] <- subset_df
}
# Resulting list of subset data frames
ann_list_avg <- list()
my_df <- data.frame()
for (i in 1:length(ann_list)) {
if (nrow(ann_list[[i]]) > 0) {
ann_avg <- ann_list[[i]] %>%
group_by(year) %>%
summarize(wateruse = mean(wateruse),
elecuse = mean(elecuse),
wateruse_population = mean(wateruse_population),
elecuse_population = mean(elecuse_population))
cityname <- strsplit(filelist[i], "./")[[1]][[2]]
cityname <- strsplit(cityname, ".csv")[[1]]
ann_avg[, "cityname"] = cityname
my_df[nrow(my_df) + 1,names(ann_avg)] = ann_avg
}
}
my_df_list <- list.append(my_df_list, my_df)
}
########### LOAD DATA #############
setwd(datadir1)
filelist <- list.files(pattern = "*.csv", full.names = TRUE)
# load cities with both water and electricity data
cities <- list()
for (filename in filelist) {
raw_df <- fread(filename)
raw_df <- na.omit(raw_df)
cities <- list.append(cities, raw_df)
}
# initialize variables
column_name <- "year"      # Column name to subset by
years_list <- c(2007:2018) # Condition to subset rows
beta_wateruse <- numeric(length(years_list))
intercept_wateruse <- numeric(length(years_list))
CI95lower_wateruse <- numeric(length(years_list))
CI95upper_wateruse <- numeric(length(years_list))
R2_wateruse <- numeric(length(years_list))
beta_elecuse <- numeric(length(years_list))
R2_elecuse <- numeric(length(years_list))
intercept_elecuse <- numeric(length(years_list))
CI95lower_elecuse <- numeric(length(years_list))
CI95upper_elecuse <- numeric(length(years_list))
output_df <- data.frame()
output_vars <- c("year", "beta_wateruse", "beta_elecuse",
"intercept_wateruse", "intercept_elecuse",
"r2_wateruse", "r2_elecuse",
"rmse_wateruse", "rmse_elecuse",
"nrmse_wateruse", "nrmse_elecuse",
"CI95lower_wateruse", "CI95upper_wateruse",
"CI95lower_elecuse", "CI95upper_elecuse")
# Loop through the cities
my_df_list <- list()
for (condition in years_list) {
# Create an empty list to store the subset data frames
ann_list <- list()
# Loop through each data frame in the list and subset rows
for (i in 1:length(cities)) {
df <- cities[[i]]
subset_df <- df[df[[column_name]] == condition, ]
ann_list[[i]] <- subset_df
}
# Resulting list of subset data frames
ann_list_avg <- list()
my_df <- data.frame()
for (i in 1:length(ann_list)) {
if (nrow(ann_list[[i]]) > 0) {
ann_avg <- ann_list[[i]] %>%
group_by(year) %>%
summarize(wateruse = mean(wateruse),
elecuse = mean(elecuse),
wateruse_population = mean(wateruse_population),
elecuse_population = mean(elecuse_population))
cityname <- strsplit(filelist[i], "./")[[1]][[2]]
cityname <- strsplit(cityname, ".csv")[[1]]
ann_avg[, "cityname"] = cityname
my_df[nrow(my_df) + 1,names(ann_avg)] = ann_avg
}
}
my_df_list <- list.append(my_df_list, my_df)
}
for (i in 1:length(years_list)) {
condition <- years_list[i]
# Calculate natural logarithms
my_df <- my_df_list[[i]]
ln_wateruse_population <- log(my_df$wateruse_population)
ln_elecuse <- log(my_df$elecuse)
ln_wateruse <- log(my_df$wateruse)
ln_elecuse_population <- log(my_df$elecuse_population)
# Perform linear regression
scaling_model_wateruse <- lm(ln_wateruse ~ ln_wateruse_population)
scaling_model_elecuse <- lm(ln_elecuse ~ ln_elecuse_population)
# Extract beta values (coefficients)
beta_wateruse <- coef(scaling_model_wateruse)
beta_elecuse <- coef(scaling_model_elecuse)
# get confidence intervals
CI95lower_wateruse <- confint(scaling_model_wateruse)[2,1]
CI95upper_wateruse <- confint(scaling_model_wateruse)[2,2]
CI95lower_elecuse <- confint(scaling_model_elecuse)[2,1]
CI95upper_elecuse <- confint(scaling_model_elecuse)[2,2]
# The first element is the intercept, and the second is the slope (scaling exponent)
intercept_wateruse <- beta_wateruse[1]
scaling_exponent_wateruse <- beta_wateruse[2]
intercept_elecuse <- beta_elecuse[1]
scaling_exponent_elecuse <- beta_elecuse[2]
# Extract R-squared value
r_squared_wateruse <- summary(scaling_model_wateruse)$r.squared
r_squared_elecuse <- summary(scaling_model_elecuse)$r.squared
# calculate rmse
rmse_wateruse <- sqrt(mean(scaling_model_wateruse$residuals^2))
rmse_elecuse <- sqrt(mean(scaling_model_elecuse$residuals^2))
nrmse_wateruse <- rmse_wateruse / sd(ln_wateruse)
nrmse_elecuse <- rmse_elecuse / sd(ln_elecuse)
# store as a data frame
output_df[nrow(
output_df) + 1,output_vars] = c(condition, scaling_exponent_wateruse,
scaling_exponent_elecuse, intercept_wateruse,
intercept_elecuse, r_squared_wateruse,
r_squared_elecuse, rmse_wateruse, rmse_elecuse,
nrmse_wateruse, nrmse_elecuse,
CI95lower_wateruse, CI95upper_wateruse,
CI95lower_elecuse, CI95upper_elecuse)
}
View(output_df)
View(output_df)
# plot beta values
ggplot(outputdf) + geom_point(aes(x = year, y = beta_wateruse))
# plot beta values
ggplot(output_df) + geom_point(aes(x = year, y = beta_wateruse))
# plot beta values
ggplot(output_df) + geom_point(aes(x = year, y = beta_wateruse)) +
geom_errorbar(aes(ymin = CI95lower_wateruse, ymax = CI95upper_wateruse))
# plot beta values
ggplot(output_df) + geom_point(aes(x = year, y = beta_wateruse)) +
geom_errorbarh(aes(ymin = CI95lower_wateruse, ymax = CI95upper_wateruse))
# plot beta values
ggplot(output_df) + geom_point(aes(x = year, y = beta_wateruse)) +
geom_errorbar(aes(ymin = CI95lower_wateruse, ymax = CI95upper_wateruse))
# plot beta values
ggplot(output_df) + geom_point(aes(x = year, y = beta_wateruse)) +
geom_errorbar(aes(ymin = CI95lower_wateruse, ymax = CI95upper_wateruse, x = year))
View(my_df_list)
# plot beta values
ggplot(output_df) + geom_point(aes(x = year, y = beta_wateruse)) +
geom_errorbar(aes(ymin = CI95lower_wateruse, ymax = CI95upper_wateruse, x = year), width = .2)
View(df)
rep(output_df$year, 2)
# plot beta values
plotdata <- data.frame('year' = rep(output_df$year, 2), 'betas' = rbind(output_df$beta_wateruse, output_df$beta_elecuse))
View(plotdata)
# plot beta values
plotdata <- data.frame('year' = rep(output_df$year, 2), 'betas' = cbind(output_df$beta_wateruse, output_df$beta_elecuse))
View(plotdata)
cbind(output_df$beta_wateruse, output_df$beta_elecuse)
rbind(output_df$beta_wateruse, output_df$beta_elecuse)
c(output_df$beta_wateruse, output_df$beta_elecuse)
# plot beta values
plotdata <- data.frame('year' = rep(output_df$year, 2), 'betas' = c(output_df$beta_wateruse, output_df$beta_elecuse),
'CI95lower' = c(output_df$CI95lower_wateruse, output_df$CI95lower_elecuse),
'CI95upper' = c(output_df$CI95upper_wateruse, output_df$CI95upper_elecuse),
'utility' = c(rep('Water', 12), rep('Electricity', 12)))
View(plotdata)
ggplot(output_df) + geom_point(aes(x = year, y = betas, color = utility)) +
geom_errorbar(aes(ymin = CI95lower, ymax = CI95upper, x = year, color = 'utility'), width = .2, position = 'dodge')
ggplot(plotdata) + geom_point(aes(x = year, y = betas, color = utility)) +
geom_errorbar(aes(ymin = CI95lower, ymax = CI95upper, x = year, color = 'utility'), width = .2, position = 'dodge')
View(plotdata)
ggplot(plotdata, aes(x = year, y = betas, color = utility)) + geom_point() +
geom_errorbar(aes(ymin = CI95lower, ymax = CI95upper), width = .2, position = 'dodge')
View(my_df)
ggplot(plotdata, aes(x = year, y = betas, color = utility)) + geom_point() +
geom_pointrange(aes(ymin = CI95lower, ymax = CI95upper))
ggplot(plotdata, aes(x = year, y = betas, color = utility)) + geom_point() +
geom_pointrange(aes(ymin = CI95lower, ymax = CI95upper)) +
facet_wrap(~utility)
ggplot(plotdata, aes(x = year, y = betas, color = utility)) + geom_point() +
geom_pointrange(aes(ymin = CI95lower, ymax = CI95upper)) +
facet_wrap(~utility) + theme(text = element_text(size = 16)) +
theme_light() + scale_color_discrete(values = c('#7f2704', '#08306b'), guides = 'none')
ggplot(plotdata, aes(x = year, y = betas, color = utility)) + geom_point() +
geom_pointrange(aes(ymin = CI95lower, ymax = CI95upper)) +
facet_wrap(~utility) + theme(text = element_text(size = 16)) +
theme_light() + scale_color_discrete(values = c('#7f2704', '#08306b'))
ggplot(plotdata, aes(x = year, y = betas, color = utility)) + geom_point() +
geom_pointrange(aes(ymin = CI95lower, ymax = CI95upper)) +
facet_wrap(~utility) + theme(text = element_text(size = 16)) +
theme_light() + scale_color_manual(values = c('#7f2704', '#08306b'))
ggplot(plotdata, aes(x = year, y = betas, color = utility)) + geom_point() +
geom_pointrange(aes(ymin = CI95lower, ymax = CI95upper)) +
facet_wrap(~utility, nrow = 2) + theme(text = element_text(size = 16)) +
theme_light() + scale_color_manual(values = c('#7f2704', '#08306b'))
ggplot(plotdata, aes(x = year, y = betas, color = utility)) + geom_point() +
geom_pointrange(aes(ymin = CI95lower, ymax = CI95upper)) + guides(color = "none") +
facet_wrap(~utility, nrow = 2) + theme(text = element_text(size = 16)) +
theme_light() + scale_color_manual(values = c('#7f2704', '#08306b'))
ggplot(plotdata, aes(x = year, y = betas, color = utility)) + geom_point() +
geom_pointrange(aes(ymin = CI95lower, ymax = CI95upper)) + guides(color = "none") +
facet_wrap(~utility, nrow = 2) + theme(text = element_text(size = 16)) +
theme_light() + scale_color_manual(values = c('#7f2704', '#08306b')) +
ylab('Beta Values') + xlab('Year')
